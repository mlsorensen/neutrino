#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojolicious::Validator;
use Mojolicious::Validator::Validation;
use Mojo::UserAgent;
use DateTime;
use Data::Dumper;
use DBI;

my $config  = plugin 'Config';
my $appname = "Neutrino";
my $version = "0.1";

get "/" => sub {
    my $self = shift;
    $self->render("index.html");
};

get "/help-about.html" => {appname => $appname, version => $version} => sub {
    my $self = shift;
} => 'about';

##########
## API ###
##########

under '/api';

get "/datapoints" => sub {
    my $self = shift;
    my $arr = [{'id'=> 1,'label'=> 'a','value'=> 30},{'id'=> 2,'label'=> 'b','value'=> 50}];
    $self->render(json => {datapoints => $arr});
};

get "/date" => sub {
    my $self = shift;
    my $date;
    $self->render(json => { result => 1, payload => $date });
};

get "/weather" => sub {
    my $self = shift;
    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT value from configuration where name='location'");
    $sth->execute();
    my $row  = $sth->fetchrow_hashref();
    $sth->finish();
    if (exists $row->{value}) {
        my $ua = Mojo::UserAgent->new();
        $ua->max_redirects(0)->connect_timeout(6)->request_timeout(10);
        my $tx = $ua->get("http://api.openweathermap.org/data/2.5/weather?q=$row->{value}" => {DNT => 1});
        if (my $res = $tx->success) { 
            my $weather = $res->json;
            my $response = {};
            $response->{id} = 1;
            $response->{humidity} = $weather->{main}->{humidity};
            $response->{fahrenheit} = sprintf("%.1f",$weather->{main}->{temp} * 1.8 - 459.67);
            $response->{celsius} = sprintf("%.1f",$weather->{main}->{temp} - 273.15);
            $response->{location} = $weather->{name};
            $response->{description} = $weather->{weather}->[0]->{main};
            $response->{icon} = "http://openweathermap.org/img/w/" . $weather->{weather}->[0]->{icon} . ".png";
            $self->render(json => { weather => [$response]}); 
        } else {
            my $err = $tx->error;
            $self->render(json => { result => 0, text => 'Unable to fetch weather from openweathermap.org' }, status => $err->{code});
        }
    } else {
        $self->render(json => { result => 0, text => 'no location config found, no weather queried' }, status => 404);
    }
};

get "/sensors" => sub {
    my $self = shift;
    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT id,id as stats,display_name,drives_hvac,sensor_address,sensor_hub_id from sensor");
    $sth->execute();
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { sensors => $data });
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
    }
};

#for ember
put "/sensors/:id" => sub {
    my $self = shift;
    my $id    = $self->param('id');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id});
    $validation->required('id')->like(qr/^\d+$/);

    if (! $validation->is_valid('id')) {
        $self->render(status => 406, json => { result => 0, text => "data provided did not match character validation"} );
        return;
    }

    my $displayname = $self->req->json->{sensor}->{display_name};
    if ($displayname) {
        my $dbh = _mysql_dbh($self, $config) or return;
        $dbh->do("update sensor set display_name=? where id=?", undef, $displayname, $id);
        if (!$dbh->errstr()) {
            $self->render(status => 200, json => { result => 1, text => 'success' });
        } else {
            $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
        }
    } else {
        $self->render(status => 406, json => { result => 0, text => 'empty name provided'});
    } 
};

get "/sensorties" => sub {
    my $self = shift;
    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT id,sensor_id,sensorgroup_id from sensor_tie");
    $sth->execute();
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { sensorties => $data });
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
    }
};

del "/sensors/:address" => sub {
    my $self       = shift;
    my $address    = $self->param('address');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'address' => $address});
    $validation->required('address')->like(qr/^\d+$/);

    if (! $validation->is_valid('address')) {
        $self->render(status => 406, json => { result => 0, text => "data provided did not match character validation"} );
        return;
    }

    # get sensor id
    my $sensorid = _sensor_addr_to_id($self, $config, $address);
    if ($sensorid eq undef or $sensorid < 0) {
        $self->render(status => 500, json => { result => 0, text => "unable to find sensor id by address"});
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("delete from data where sensor_id=?", undef, $sensorid);
    if ($dbh->errstr()){
        $self->render(status => 500, json => { result => 0, text => 'failed to delete from database:' . $dbh->errstr()});
    } else {
        $dbh->do("delete from sensor where sensor_address=?", undef, $address);
        if($dbh->errstr()) {
            $self->render(status => 500, json => { result => 0, text => 'failed to delete from database:' . $dbh->errstr()});
        } else {
            $self->render(status => 200, json => { result => 1, text => 'success' });
        }
    }
};

get "/hvaccontrollers" => sub {
    my $self = shift;
    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT * from controller");
    $sth->execute();
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    foreach my $ctrlr (@{$data}) {
        my $sth  = $dbh->prepare("SELECT capability,setpoint from controller_capabilities where controller_id=?");
        $sth->execute($ctrlr->{id});
        $ctrlr->{capabilities} = $sth->fetchall_arrayref({});
        $sth->finish();
    }
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { hvaccontrollers => $data});
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred:' . $dbh->errstr()});
    }
};

get "/hvaccontrollers/:id" => sub {
    my $self = shift;
    my $id = $self->param('id');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id});
    $validation->required('id')->like(qr/^\d+$/);

    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT * from controller where id=?");
    $sth->execute($id);
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    foreach my $ctrlr (@{$data}) {
        my $sth  = $dbh->prepare("SELECT capability,setpoint from controller_capabilities where controller_id=?");
        $sth->execute($ctrlr->{id});
        $ctrlr->{capabilities} = $sth->fetchall_arrayref({});
        $sth->finish();
    }
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { hvaccontrollers => $data});
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred:' . $dbh->errstr()});
    }
};

put "/hvaccontrollers/:id" => sub {
    my $self = shift;
    my $id = $self->param('id');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id});
    $validation->required('id')->like(qr/^\d+$/);

    my $body = $self->req->json->{hvaccontroller};
    my $dbh  = _mysql_dbh($self, $config) or return;

    ## persist setpoints
    my $caps = $body->{capabilities};
    foreach my $cap(@{$caps}) {
        my $sth = $dbh->prepare('UPDATE controller_capabilities set setpoint=? where capability=? and controller_id=?');
        $sth->execute($cap->{setpoint}, $cap->{capability}, $id);
        if($dbh->errstr()) {
            $self->render(status => 500, json => { result => 0, payload => 'Database error occurred:' . $dbh->errstr()});
        }
        $sth->finish();
    }

    ## persist enable state, fanmode
    my $sth = $dbh->prepare('UPDATE controller set fan_mode=?, enabled=?, display_name=? where id=?');
    $sth->execute($body->{fan_mode}, $body->{enabled}, $body->{display_name}, $id);
    if($dbh->errstr()) {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred:' . $dbh->errstr()});
    }
    
    $self->render(status => 200, json => {});
};

get "/controllers" => sub {
    my $self = shift;
    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT * from controller");
    $sth->execute();
    my $data = $sth->fetchall_hashref('id');
    $sth->finish();
    foreach my $id (keys %{$data}) {
        my $sth  = $dbh->prepare("SELECT capability,setpoint from controller_capabilities where controller_id=?");
        $sth->execute($id);
        $data->{$id}->{capabilities} = $sth->fetchall_hashref('capability');
        $sth->finish();
    }
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { result => 1, payload => $data});
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred:' . $dbh->errstr()});
    }
};

post "/controllers/:id/sensorgroup" => sub {
    my $self  = shift;
    my $id    = $self->param('id');
    my $group = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'group' => $group});
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('group')->like(qr/^\d+$/);
    if(! $validation->is_valid('id') || ! $validation->is_valid('group')) {
        $self->render(status => 406, json => { result => 0, text => "data provided did not match character validation"} );
        return;
    }

    if($id == 0) {
        $id = undef;
    }

    my $dbh  = _mysql_dbh($self, $config) or return;
    $dbh->do("UPDATE sensorgroup set controller_id=? where id=?",undef, $id, $group);   
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { result => 1, text => 'success'});
    } else {
        if ($dbh->errstr() =~ /Duplicate/) {
            $self->render(status => 500, json => { result => 0, text => 'Controller is already associated with another sensor group'});
        } else {
            $self->render(status => 500, json => { result => 0, text => 'Failed to update group and controller:' . $dbh->errstr()});
        }
    }
};

post "/controllers/:id/:setting" => sub {
    my $self    = shift;
    my $id      = $self->param('id');
    my $setting = $self->param('setting');
    my $value   = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'setting' => $setting, 'value' => $value});
    $validation->required('setting')->in(qw|heat cool humidify enabled fan_mode|);
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('value')->like(qr/^(\d+|auto|on|off)$/);
    
    if(! $validation->is_valid('id') || ! $validation->is_valid('setting') || ! $validation->is_valid('value')) {
        $self->render(status => 406, json => { result => 0, text => "data provided did not match character validation"} );
        return;
    }

    my $dbh  = _mysql_dbh($self, $config) or return;

    if ($setting eq 'fan_mode' or $setting eq 'enabled') {
        $dbh->do("UPDATE controller SET $setting=? WHERE id=?",undef, $value, $id);
    } else {
        $dbh->do("UPDATE controller_capabilities SET setpoint=? WHERE controller_id=? AND capability=?", undef, $value, $id, $setting);
    }
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { result => 0, text => 'success'});
    } else {
        $self->render(status => 500, json => { result => 0, text => 'Failed to update controller:' . $dbh->errstr()});
    }
};

#for ember
get "/sensorgroups" => sub {
    my $self = shift;
    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT * from sensorgroup");
    $sth->execute();
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (!$dbh->errstr()) {
        my $statsdata = [];
        # insert group members as well
        foreach my $sg (@{$data}) {
            $sth = $dbh->prepare("SELECT sensor.id from sensor,sensor_tie where sensor_tie.sensor_id = sensor.id and sensor_tie.sensorgroup_id=?");
            $sth->execute($sg->{id});
            $sg->{members} = [];
            if(!$dbh->errstr()) {
                $sg->{members} = [];
                my @temp = map { $_->[0] } @{$sth->fetchall_arrayref()};
                $sg->{members} = \@temp;
            }
            $sth->finish();

            # fetch stats for group
            my $tempcol = _tempunits($self,$config);
            $sth = $dbh->prepare("select sensor_tie.sensorgroup_id, truncate(avg($tempcol),2) as temperature, truncate(avg(data.humidity),2) as humidity,truncate(avg(data.pascals),0)"
                                 . " as pressure from data,sensor_tie where sensor_tie.sensorgroup_id=? and data.sensor_id=sensor_tie.sensor_id "
                                 . " and date > (now() - 180) and data.pascals != 0 and humidity != 0 group by sensor_tie.sensorgroup_id;");
            $sth->execute($sg->{id});
            if(!$dbh->errstr()) {
                my $temp = $sth->fetchall_hashref('sensorgroup_id')->{$sg->{id}};
                #$temp->{id} = scalar @{$statsdata};
                $temp->{id} = $sg->{id};
                $sg->{stats} = $temp->{id};
                push @{$statsdata}, $temp;
            } else {
                print STDERR "Failed to fetch sensorgroup stats for group id $sg->{id}";
            }
            $sth->finish();
        }
        # sideload sensor data
        my $members = [];
        $sth = $dbh->prepare("SELECT sensor.id,sensor.display_name,sensor.drives_hvac, sensor.sensor_address, sensor.sensor_hub_id from sensor");
        $sth->execute();
        $members = $sth->fetchall_arrayref({});
        $self->render(status => 200, json => { sensorgroups => $data, sensorgroupstats => $statsdata, sensors => $members});
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
    }
};

#for ember
get "/sensorgroups/:id" => sub {
    my $self = shift;
    my $groupid = $self->param('id');

    my $dbh  = _mysql_dbh($self, $config) or return;
    my $sth  = $dbh->prepare("SELECT * from sensorgroup where id=?");
    $sth->execute($groupid);
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (!$dbh->errstr()) {
        my $statsdata = [];
        # insert group members as well
        foreach my $sg (@{$data}) {
            $sth = $dbh->prepare("SELECT sensor.id from sensor,sensor_tie where sensor_tie.sensor_id = sensor.id and sensor_tie.sensorgroup_id=?");
            $sth->execute($sg->{id});
            $sg->{members} = [];
            if(!$dbh->errstr()) {
                $sg->{members} = [];
                my @temp = map { $_->[0] } @{$sth->fetchall_arrayref()};
                $sg->{members} = \@temp;
            }
            $sth->finish();

            # fetch stats for group
            my $tempcol = _tempunits($self,$config);
            $sth = $dbh->prepare("select sensor_tie.sensorgroup_id, truncate(avg($tempcol),2) as temperature, truncate(avg(data.humidity),2) as humidity,truncate(avg(data.pascals),0)"
                                 . " as pressure from data,sensor_tie where sensor_tie.sensorgroup_id=? and data.sensor_id=sensor_tie.sensor_id "
                                 . " and date > (now() - 180) and data.pascals != 0 and humidity != 0 group by sensor_tie.sensorgroup_id;");
            $sth->execute($sg->{id});
            if(!$dbh->errstr()) {
                my $temp = $sth->fetchall_hashref('sensorgroup_id')->{$sg->{id}};
                $temp->{id} = $sg->{id};
                $sg->{stats} = $temp->{id};
                push @{$statsdata}, $temp;
            } else {
                print STDERR "Failed to fetch sensorgroup stats for group id $sg->{id}";
            }
            $sth->finish();
        }
        # sideload sensor data
        my $members = [];
        $sth = $dbh->prepare("SELECT sensor.id,sensor.display_name,sensor.drives_hvac, sensor.sensor_address, sensor.sensor_hub_id from sensor,sensor_tie where sensor_tie.sensor_id = sensor.id and sensor_tie.sensorgroup_id=?");
        $sth->execute($groupid);
        $members = $sth->fetchall_arrayref({});
        $self->render(status => 200, json => { sensorgroups => $data, sensorgroupstats => $statsdata, sensors => $members});
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
    } 
};

# for ember
put "/sensorgroups/:id" => sub {
    my $self = shift;
    my $id = $self->param('id');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id});
    $validation->required('id')->like(qr/^\d+$/);;
    if(! $validation->is_valid('id')) {
        $self->render(status => 406, json => { result => 0, text => "id provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("delete from sensor_tie where sensorgroup_id=?", undef, $id);
    if (!$dbh->errstr()) {
        my $members = $self->req->json->{sensorgroup}->{members};
        foreach(@{$members}) {
            $dbh->do("insert into sensor_tie (sensor_id, sensorgroup_id) values (?,?)", undef, $_, $id);
            if ($dbh->errstr()) {
                $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
            }
        }
        $self->render(status => 200, json => { result => 1, text => 'success' });
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'Database error occurred'});
    }
};

put "/sensorgroups" => sub {
    my $self       = shift;
    my $name       = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'name' => $name});
    $validation->required('name')->like(qr/^[\s\w\d,\-\._\']+$/);;
    if(! $validation->is_valid('name')) {
        $self->render(status => 406, json => { result => 0, text => "name provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("insert into sensorgroup (display_name) values (?)", undef, $name);
    if($dbh->errstr()) {
        $self->render(status => 500, json => { result => 0, text => 'failed to save values to database'});
    }
    $self->render(status => 200, json => { result => 1, text => 'success' });
   
};

del "/sensorgroups/:id" => sub {
    my $self       = shift;
    my $id         = $self->param('id');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id});
    $validation->required('id')->like(qr/^\d+$/);;
    if(! $validation->is_valid('id')) {
        $self->render(status => 406, json => { result => 0, text => "id provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("delete from sensorgroup where id=?", undef, $id);
    if($dbh->errstr()) {
        if ($dbh->errstr() =~ /foreign key constraint fails/) {
            $self->render(status => 500, json => { result => 0, text => 'Cannot delete group with sensors attached'});
        } else {
            $self->render(status => 500, json => { result => 0, text => 'failed to delete from database:' . $dbh->errstr()});
        }
    } else {
        $self->render(status => 200, json => { result => 1, text => 'success' });
    }
};

post "/sensorgroups/:id/name" => sub {
    my $self       = shift;
    my $id         = $self->param('id');
    my $name       = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'name' => $name});
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('name')->like(qr/^[\s\w\d,\-\._\']+$/);
    if(! $validation->is_valid('id') || ! $validation->is_valid('name')) {
        $self->render(status => 406, json => { result => 0, text => "id or value provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("update sensorgroup set display_name=? where id=?", undef, $name, $id);
    if($dbh->errstr()) {
        $self->render(status => 500, json => { result => 0, text => 'failed to update database:' + $dbh->errstr()});
    }
    $self->render(status => 200, json => { result => 1, text => 'success' });
};

get "/sensorgroups/:id/sensors" => sub {
    my $self       = shift;
    my $id         = $self->param('id');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id});
    $validation->required('id')->like(qr/^\d+$/);
    if(! $validation->is_valid('id')) {
        $self->render(status => 406, json => { result => 0, text => "id or value provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT sensor_address,display_name,sensor_group,sensor.id,sensorgroup_id " .
                            "from sensor,sensor_tie where sensor_tie.sensor_id = sensor.id and sensor_tie.sensorgroup_id=?");
    $sth->execute($id);
    if(!$dbh->errstr()) {
        my $data = $sth->fetchall_hashref('id');
        $self->render(status => 200, json => { result => 1, payload => $data});
    } else {
        $self->render(status => 500, json => { result => 0, text => 'failed to query sensors for sensor group'});
    }
};

put "/sensorgroups/:id/sensors/:sensoraddress" => sub {
    my $self            = shift;
    my $id              = $self->param('id');
    my $sensoraddress   = $self->param('sensoraddress');
    my $validator       = Mojolicious::Validator->new;
    my $validation      = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'sensoraddress' => $sensoraddress});
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('sensoraddress')->like(qr/^\d+$/);
    if(! $validation->is_valid('id') || ! $validation->is_valid('sensoraddress')) {
        $self->render(status => 406, json => { result => 0, text => "id or sensoraddress provided did not match character validation"} );
        return;
    }

    # get sensor id
    my $sensorid = _sensor_addr_to_id($self, $config, $sensoraddress);
    if ($sensorid eq undef or $sensorid < 0) {
        $self->render(status => 500, json => { result => 0, text => "unable to find sensor id by address"});
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    # does relationship already exist?
    my $sth = $dbh->prepare("SELECT * FROM sensor_tie WHERE sensor_id=$sensorid AND sensorgroup_id=$id");
    $sth->execute();
    if(!defined($sth->fetchrow_arrayref())) {
        $dbh->do("INSERT INTO sensor_tie (sensor_id, sensorgroup_id) VALUES (?, ?)", undef, $sensorid, $id);
        if (!$dbh->errstr()) {
            $self->render(status => 200, json => { result => 1, text => "success"});
        } else {
            $self->render(status => 500, json => { result => 0, text => "unable to insert into database"});
        }
    } else {
        # it already exists
        $self->render(status => 200, json => { result => 1, text => "success"});
    }
};

del "/sensorgroups/:id/sensors/:address" => sub {
    my $self            = shift;
    my $id              = $self->param('id');
    my $sensoraddress   = $self->param('address');
    my $validator       = Mojolicious::Validator->new;
    my $validation      = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'sensoraddress' => $sensoraddress});
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('sensoraddress')->like(qr/^\d+$/);
    if(! $validation->is_valid('id') || ! $validation->is_valid('sensoraddress')) {
        $self->render(status => 406, json => { result => 0, text => "id or value sensoraddress did not match character validation"} );
        return;
    }

     # get sensor id
    my $sensorid = _sensor_addr_to_id($self, $config, $sensoraddress);
    if ($sensorid eq undef or $sensorid < 0) {
        $self->render(status => 500, json => { result => 0, text => "unable to find sensor id by address"});
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("DELETE FROM sensor_tie WHERE sensor_id=? and sensorgroup_id=?", undef, $sensorid, $id);
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { result => 1, text => "success"});
    } else {
        $self->render(status => 500, json => { result => 0, text => "unable to delete from database"});
    }

};

get "/sensors/:address/data" => sub {
    my $self       = shift;
    my $address    = $self->param('address');
    my $value      = lc($self->param('value'));
    my $hours      = $self->param('hours');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'address' => $address, 'value' => $value, 'hours' => $hours});
    $validation->required('address')->like(qr/^\d+$/);
    $validation->required('value')->in(qw|voltage fahrenheit celsius humidity pascals all|);
    $validation->required('hours')->size(1,720);
    if(! $validation->is_valid('address') || ! $validation->is_valid('value') || ! $validation->is_valid('hours')) {
        $self->render(status => 406, json => { result => 0, text => "a parameter($address,$value,$hours) provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    my $field = $value;
    $field = "voltage,pressure,humidity,temperature" if $field eq "all";
    my $sth = $dbh->prepare("SELECT UNIX_TIMESTAMP(date) as epoch,date,data.id,$field from data,sensor where sensor.id=data.sensor_id and sensor.sensor_address=? and date >= DATE_SUB(NOW(),INTERVAL $hours HOUR)");
    $sth->execute($address);
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { result => 1, payload => $data});
    } else {
        print $dbh->errstr();
        $self->render(status => 500, json => { result => 0, text => 'Database error occurred'});
    }
};

# for ember
get "/sensorstats/:id" => sub {
    my $self       = shift;
    my $sensorid   = $self->param('id');
    my @strings = ('pascals','humidity','fahrenheit','celsius','voltage');
    my $stringquery = join(',', @strings);

    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT id from sensor");
    $sth->execute();
    my $sensors = $sth->fetchall_arrayref({});
    
    my $response = {};
        $sth = $dbh->prepare("SELECT UNIX_TIMESTAMP(date)*1000 as date,$stringquery from data where sensor_id=? and date >= DATE_SUB(NOW(),INTERVAL 1 HOUR)");
        $sth->execute($sensorid);
        my $data = $sth->fetchall_arrayref({});
        my $sensorstats;
        $sensorstats->{id} = $sensorid;
        $sensorstats->{sensor_id} = $sensorid;
        foreach my $str(@strings) {
            my @temp = map {[$_->{date},$_->{$str}]} @{$data};
            $sensorstats->{$str} = \@temp;
        }
        push @{$response->{sensorstats}}, $sensorstats;
    $self->render(status => 200, json => $response);
};

# for ember
get "/sensorstats" => sub {
    my $self       = shift;
    my @strings = ('pascals','humidity','fahrenheit','celsius','voltage');
    my $stringquery = join(',', @strings);

    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT id from sensor");
    $sth->execute();
    my $sensors = $sth->fetchall_arrayref({});
    
    my $response = {};
    foreach my $sensor(@{$sensors}) {
        #$sth = $dbh->prepare("SELECT date,$stringquery from data,sensor where sensor.id=data.sensor_id and sensor.sensor_address=? and date >= DATE_SUB(NOW(),INTERVAL 1 HOUR)");
        $sth = $dbh->prepare("SELECT UNIX_TIMESTAMP(date)*1000 as date,$stringquery from data where sensor_id=? and date >= DATE_SUB(NOW(),INTERVAL 1 HOUR)");
        $sth->execute($sensor->{id});
        my $data = $sth->fetchall_arrayref({});
        my $sensorstats;
        $sensorstats->{id} = $sensor->{id};
        $sensorstats->{sensor_id} = $sensor->{id};
        foreach my $str(@strings) {
            my @temp = map {[$_->{date},$_->{$str}]} @{$data};
            $sensorstats->{$str} = \@temp;
        }
        push @{$response->{sensorstats}}, $sensorstats;
    }
    $self->render(status => 200, json => $response);
};

post "/sensors/:address/name" => sub {
    my $self       = shift;
    my $address    = $self->param('address');
    my $value      = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'address' => $address, 'value' => $value});
    $validation->required('address')->like(qr/^\d+$/);
    $validation->required('value')->like(qr/^[\s\w\d,\-\._\']+$/);
    if(! $validation->is_valid('address') || ! $validation->is_valid('value')) {
        $self->render(status => 406, json => { result => 0, text => "a parameter($address,$value) provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("UPDATE sensor set display_name=? where sensor_address=?", undef, $value, $address);
    if($dbh->errstr()) {
        $self->render(status => 500, json => { result => 0, text => 'failed to save value to database'});
    }
    $self->render(status => 200, json => { result => 1, text => 'success' });
};

get "/config" => sub {
    my $self = shift;
    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT name,value from configuration");
    $sth->execute();
    my $data = $sth->fetchall_hashref('name');
    $sth->finish();
    $self->render(json => { result => 1, payload => $data});
};

get "/config/:key" => sub {
    my $self = shift;
    my $key = $self->param('key');
    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT value from configuration where name='$key'");
    $sth->execute();
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    if (exists $row->{value}) {
        $self->render(json => { result => 1, payload => $row});
    } else {
        $self->render(json => { result => 0, text => 'no config found' }, status => 404);
    }
};

post "/config/:key" => sub {
    my $self       = shift;
    my $key        = $self->param('key');
    my $value      = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'key' => $value});
    $validation->required('key')->like(qr/^[\s\w\d,\-\._\']+$/);
    if(! $validation->is_valid('key')) {
        $self->render(status => 406, json => { result => 0, text => "value '$value' provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("select id from configuration where name='$key'");
    $sth->execute();
    my $row = $sth->fetchrow_hashref();
    if (exists $row->{id}) {
        $dbh->do("UPDATE configuration SET name=?, value=? WHERE id=?", undef, $key, $value, $row->{id});
        if($dbh->errstr()) {
            $self->render(status => 500, json => { result => 0, text => 'failed to save value to database'});
            return;
        }
    } else {
        $dbh->do("INSERT INTO configuration (name, value) VALUES (?, ?)", undef, $key, $value);
        if($dbh->errstr()) {
            $self->render(status => 500, json => { result => 0, text => 'failed to save value to database'});
            return;
        }
    }

    $self->render(status => 200, json => { result => 1, text => 'success' });
};


app->start;


##################
### local subs ###
##################

sub _mysql_dbh {
    my $self   = shift;
    my $config = shift;
    my $dbh    = DBI->connect("DBI:mysql:database=$config->{mysqldb}:host=$config->{mysqlserver}:port=3306",
                           $config->{mysqluser},$config->{mysqlpass})
                      or $self->render(status=>500,text=>'Failed database connection') and return 0;
    return $dbh;
}

sub _sensor_addr_to_id {
    my $self    = shift;
    my $config  = shift;
    my $address = shift;
    my $dbh     = _mysql_dbh($self,$config);

    my $sth = $dbh->prepare("SELECT id FROM sensor WHERE sensor_address=?");
    $sth->execute($address);

    if ($dbh->errstr()){
       return -1;
    }

    my $id = ($sth->fetchrow_array())[0];
    return $id;
}

sub _tempunits {
    my $self = shift;
    my $config = shift;
    my $dbh = _mysql_dbh($self, $config);
    my $sth = $dbh->prepare("select value from configuration where name='tempunits'");
    $sth->execute();
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    $dbh->disconnect();
    if (exists $row->{value}) {
        return lc($row->{value});
    } else {
        return "Fahrenheit";
    }
}

__DATA__

@@ about.html.ep
<div class="jumbotron">
  <div class="container">
    <%= $appname %> <%= $version %>
  </div>
</div>

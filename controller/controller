#!/usr/bin/env perl
use Data::Dumper;
use DBI;
use Getopt::Std;
use File::Slurp qw|read_file|;
use Neutrino::Hub;
use threads;
use threads::shared;

my $appname          = 'controller';
my $version          = '0.1';
my $state            = 'idle';
my $opts             = {};
my $hub              = Neutrino::Hub->new({"debug" => 1});
my $interval         = 1;

getopts('c:', $opts);
print ("no config file provided\n") && usage() && exit(1) if (! exists $opts->{c});
my $config = eval(read_file($opts->{c}));
validate_config($config);

$SIG{INT}  = \&handle_exit;
$SIG{TERM} = \&handle_exit;

if (! verify_controller($config)) {
    die("unable to find or register controller with database, exiting\n");
}

print ("verified controller, starting services\n");
do_idle($config);
#$hub->idle();

while (1) {
    if (get_settings($config)) {
        print Dumper $config;
        handle_settings($config);
    } else {
        print ("skipping due to setpoint fetch failure\n");
    }

    # clean up data on occasion
    if ($interval >= 100) {
        clean_stats($config);
        $interval = 1;
    } else {
        $interval++;
   }
   sleep 5;
}

############
### subs ###
############
sub validate_config {
    my $config = shift;
    if ($config->{hysteresis} eq undef) {
        $config->{hysteresis} = 1;
    }
}
sub handle_exit {
    my $signal = shift;
    print ("\nexiting on signal $signal\n");
    print ("might need to wait for fan to clear excess heat/cold/humidity\n");
    #$hub->idle();
    do_idle($config);
    print ("goodbye\n");
    exit(0);
}

sub handle_settings {
    my $config = shift;

    if (!$config->{settings}->{enabled}) {
        print ("controller disabled, ensuring everything is off\n");
        # ensure we shut off if we were recently disabled;
        do_idle($config);
        #$hub->idle();
        return;
    }

    # get stats for assigned sensorgroup
    my $stats = get_stats($config);
    if ($stats eq undef) {
        print ("no stats for controller, doing nothing\n");
        return;
    }

    # decide whether to heat, cool, or just fan
    $state = state_classifier($stats, $config);
    
    if ($state eq "heat") {
        do_heating($config);
        #$hub->heat();
        #$hub->animate_leds({"name"=>"dual_sweep_up", color =>[90,20,0]});
    } elsif ($state eq "heat+humidify") {
        do_heating_and_humidifying($config);
        #$hub->heat_and_humidify();
        #$hub->animate_leds({"name"=>"dual_sweep_up", color =>[90,0,10]});
    } elsif ($state eq "humidify") {
        do_humidifying($config);
        #$hub->humidify();
        #$hub->animate_leds({"name"=>"dual_sweep_up", color =>[0,90,30]});
    } elsif ($state eq "cool") {
        do_cooling($config);
        #$hub->cool();
        #$hub->animate_leds({"name"=>"dual_sweep_down", color =>[00,20,90]});
    } elsif ($state eq "fan") {
        do_fan($config);
        #$hub->fan();
        #$hub->animate_leds({"name"=>"fan"});
    }else {
        do_idle($config);
        #$hub->idle();
    }
}

sub state_classifier {
    my $stats  = shift;
    my $config = shift;
    my $caps   = $config->{settings}->{capabilities};

    my $newstate = "idle";

    # fan on only
    if (exists $caps->{heat} && $config->{settings}->{fan_mode} eq 'on') {
        $newstate = "fan";
    }

    # heat. If we were already heating, use setpoint + $hysteresis as the cutoff.
    # the idea is that given setpoint 72 deg we don't start heating at 71.99 deg and stop at 72.01, we push up to 73.
    # we might want to consider PID logic, we'd be one of the first thermostats to do so.
    if (exists $caps->{heat} && $stats->{temperature} ne "" && $caps->{heat}->{setpoint} ne undef) {
        # keep heating to setpoint + 1 if we were already heating
        if ($state eq "heat" && $stats->{temperature} <= $caps->{heat}->{setpoint} + $config->{hysteresis}) {
            $newstate = "heat";
        # start heating at setpoint if we weren't previously heating
        } elsif ($stats->{temperature} <= $caps->{heat}->{setpoint}) {
            $newstate = "heat";
        }
    }

    # humidify, we can add this to heat. TODO: setpoints for humidification
    if (exists $config->{settings}->{capabilities}->{humidify}) {
        #$newstate eq "heat" ? $newstate = "heat+humidify" : $newstate = "humidify";
    }

    # cool, we need to block out humidify unless we want rain in the ducts. Simply overwrite humidify newstate if we need to cool.
    if (exists $caps->{cool} && $stats->{temperature} ne "" && $caps->{cool}->{setpoint} ne undef) {
        # keep cooling to setpoint -1 if we were already cooling
        if ($state eq "cool" && $stats->{temperature} >= $caps->{cool}->{setpoint} - $config->{hysteresis}) {
            $newstate = "cool";
        # start heating at setpoint if we weren't previously heating
        } elsif ($stats->{temperature} >= $caps->{cool}->{setpoint}) {
            $newstate = "cool";
        }
    }

    print ("state is classified as '$newstate'\n");

    return $newstate;
}

sub do_cooling {
    my $config = shift;
    $hub->cool();
    $hub->animate_leds({"name"=>"dual_sweep_down", color =>[00,20,90]});
    set_controller_status($config,"cooling");
}

sub do_heating {
    my $config = shift;
    $hub->heat();
    $hub->animate_leds({"name"=>"dual_sweep_up", color =>[90,20,0]});
    set_controller_status($config,"heating");
}

sub do_humidifying {
    my $config = shift;
    $hub->humidify();
    $hub->animate_leds({"name"=>"dual_sweep_up", color =>[0,90,30]});
    set_controller_status($config,"humidifying");
}

sub do_heating_and_humidifying {
    my $config = shift;
    $hub->heat_and_humidify();
    $hub->animate_leds({"name"=>"dual_sweep_up", color =>[90,0,10]});
    set_controller_status($config,"heating and humidifying");
}

sub do_fan {
    my $config = shift;
    $hub->fan();
    $hub->animate_leds({"name"=>"fan"});
    set_controller_status($config,"fan");
}

sub do_idle {
    my $config = shift;
    $hub->idle();
    set_controller_status($config,"idle");
}

#sub gpio_status {
#    my $pin = shift;
#    my $pindir = "/sys/class/gpio/gpio$pin";
#
#    lock($gpiolock);
#    chomp(my $pinval = `cat $pindir/value`);
#    return pinval;
#}

#sub gpio_off {
#    my $pin = shift;
#    my $pindir = "/sys/class/gpio/gpio$pin";
#    
#    lock($gpiolock);
#    if (! -e $pindir) {
#        # pin doesn't exist, can't be on
#        return 1;
#    } else {
#        `echo 0 > $pindir/value`;
#    }
#}

#sub gpio_off_delay {
#    my $pin = shift;
#    my $pindir = "/sys/class/gpio/gpio$pin";
#
#    if (! -e $pindir) {
#        print ("delayed shutoff requested for pin $pin, but sysfs file doesn't exist. Ignoring request\n");
#        return;
#    }
#
#    my $thr = threads->create(sub {
#        lock($fanlock);
#        threads->detach();
#        chomp (my $pinstate = `cat $pindir/value`);
#        # do nothing if pin state is already off
#        if ($pinstate == 0) {
#            #print "delayed shutoff requested for pin that was already off, ignoring\n";
#        } else {
#            sleep 30;
#            # do nothing if pin state has changed while we were sleeping
#            lock($gpiolock);
#            chomp (my $newpinstate = `cat $pindir/value`);
#            if ( $pinstate == $newpinstate) {
#                `echo 0 > $pindir/value`;
#            }
#        }
#    });
#}

#sub gpio_on {
#    my $pin = shift;
#    my $pindir = "/sys/class/gpio/gpio$pin";
#
#    lock($gpiolock);
#    if (! -e $pindir) {
#        # pin doesn't exist, can't be on
#        `echo $pin > /sys/class/gpio/export`;
#        `echo out > $pindir/direction`;
#    }
#    
#    `echo 1 > $pindir/value`;
#}

sub get_stats {
    my $config = shift;

    if (! exists $config->{sensorgroupid}) {
        print ("no sensorgroup attached, skipping stats lookup\n");
        return undef;
    }

    my $dbh = _mysql_dbh($config);
    my $tempcol = '';
    $tempcol = "fahrenheit" if $config->{tempunits} eq "fahrenheit";
    $tempcol = "celsius" if $config->{tempunits} eq "celsius";
    if ($tempcol eq '') {
        print "unable to get temperature preference from config, not fetching stats\n";
        return undef;
    }
    #my $sth = $dbh->prepare("select avg($tempcol) as temperature, avg(data.humidity) as humidity from data,sensor_tie where sensor_tie.sensorgroup_id=? and date > (now() - 180) group by data.sensor_id;");
    my $sth = $dbh->prepare("select sensor_tie.sensorgroup_id, avg($tempcol) as temperature, avg(data.humidity) as humidity,avg(data.pascals)"
                                 . " as pressure from data,sensor_tie where sensor_tie.sensorgroup_id=? and data.sensor_id=sensor_tie.sensor_id "
                                 . " and date > (now() - 180) and data.pascals != 0 and humidity != 0 group by sensor_tie.sensorgroup_id;");
    $sth->execute($config->{sensorgroupid});
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    $dbh->disconnect();
    if ($dbh->errstr()) {
        print ("error fetchng sensor data: " . $dbh->errstr() . "\n");
        return undef;
    }
    return $row;
}

sub clean_stats {
    my $config = shift;
    my $dbh = _mysql_dbh($config);
    $dbh->do("delete from neutrino.data where date < now() - interval 1 week");
    print ("cleaning up old sensor data\n");
    $dbh->disconnect();
}

sub get_sensors {
    my $config = shift;
    my $dbh = _mysql_dbh($config);

    if (! exists $config->{sensorgroupid}) {
        print ("controller has no sensor group attached, no sensors to fetch\n");
        return 0;
    }

    my $sth = $dbh->prepare("select sensor_id from sensor_tie where sensorgroup_id=?");
    $sth->execute($config->{sensorgroupid});
    $config->{sensors} = $sth->fetchall_arrayref();
    $sth->finish();
    $dbh->disconnect();
    if ($dbh->errstr()) {
        print ("Error fetching sensors from sensor tie table: " . $dbh->errstr() . "\n");
        return 0;
    } else {
        return 1;
    }
}

sub get_settings {
    my $config = shift;
    my $dbh = _mysql_dbh($config);
    my $sth = $dbh->prepare("select enabled,fan_mode from controller where id=?");
    $sth->execute($config->{id});
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    $sth = $dbh->prepare("select capability,setpoint from controller_capabilities where controller_id=?");
    $sth->execute($config->{id});
    $row->{capabilities} = $sth->fetchall_hashref('capability');
    $sth->finish();
    $dbh->disconnect();
    if (! $dbh->errstr()) {
        $config->{settings} = $row;
        get_sensorgroup($config);
        get_sensors($config);
        get_tempunits($config);
        return 1;
    }
    print ("Error: unable to fetch settings from database\n");
    return 0;
}

sub get_sensorgroup {
    my $config = shift;
    my $dbh = _mysql_dbh($config);
    my $sth = $dbh->prepare("select id from sensorgroup where controller_id=?");
    $sth->execute($config->{id});
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    $dbh->disconnect();
    if (exists $row->{id}) {
        $config->{sensorgroupid} = $row->{id};
    } else {
        delete $config->{sensorgroupid} if exists $config->{sensorgroupid};
    }
}

sub get_tempunits {
    my $config = shift;
    my $dbh = _mysql_dbh($config);
    my $sth = $dbh->prepare("select value from configuration where name='tempunits'");
    $sth->execute();
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    $dbh->disconnect();
    if (exists $row->{value}) {
        $config->{tempunits} = lc($row->{value});
    } else {
        die("Unable to find a temperature unit preference in the database, exiting\n");
    }
}

# find controller in db, or add it if missing
sub verify_controller {
    my $config = shift;

    if (get_controller_id($config)) {
        return 1;
    }

    my $dbh = _mysql_dbh($config) or return;
    $dbh->do("insert into controller (display_name) values (?)", undef, $config->{name});
    if ($dbh->errstr()) {
        die ("Error inserting controller: " . $dbh->errstr() . "\n");
    } else {
        my $controllerid = get_controller_id($config);
        if ($controllerid) {
            foreach my $capability( @{$config->{capabilities}}) {
                $dbh->do("insert into controller_capabilities (controller_id, capability) values (?, ?)", undef, $controllerid, $capability);
            }
            return 1;
        } 
    }
    die ("Error verifying controller, unable to successfully insert and fetch controller from database\n");
}

sub get_controller_id {
    my $config = shift;
    my $dbh = _mysql_dbh($config) or return;
    my $sth = $dbh->prepare("select id from controller where display_name=?");
    $sth->execute($config->{name});
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    $dbh->disconnect();
    if (exists $row->{id}) {
        $config->{id} = $row->{id};
        return 1;
    }
    return 0;
}

sub set_controller_status {
    my $config = shift;
    my $status = shift;
    my $dbh = _mysql_dbh($config) or return;
    $dbh->do("update controller set status=? where id=?", undef, $status, $config->{id});
    if ($dbh->errstr()) {
        warn "unable to update controller state, is mysql running?";
    }
    $dbh->disconnect();
}

sub usage {
print <<EOF

$appname v$version

Usage: $appname <options>

options:

    -c configfile

EOF
}

sub _mysql_dbh {
    my $config = shift;
    my $dbh    = DBI->connect("DBI:mysql:database=$config->{mysqldb}:host=$config->{mysqlserver}:port=3306",
                           $config->{mysqluser},$config->{mysqlpass})
                      or print "Failed database connection\n" and return 0;
    return $dbh;
}
